angular.module("questionnaire-results-page", [
    'app.pages3'
]);

angular.module('app.pages3', [])
    .controller(
        'QuestionnaireResults', [ '$scope', function ($scope) {


            let vm = this;

            vm.demographics = [
                "Gender",
                "Educational Qualification",
                "Age Range",
                "Occupation"
            ];
            let questions = [
                "The visualisation helps me understand how the tool works",
                "The visualisation of how the Agent works is satisfying",
                "The visualisation is sufficiently detailed",
                "The visualisation seems complete",
                "The visualisation of how the tool works tells me how to use it",
                "The tool was helpful in allowing me to quickly understanding the reasons for the outcome"
            ];

            let questions_b = [
                "Was it necessary for the calendar to reschedule the event?",
                "What was the first action performed by the calendar?",
                "Was the agent equipped to reschedule the event if the first proposed time was not suitable?",
                "Did you get an understanding of how the calender made it's decisions?"
            ];



            let question_b_answers = [
                "Yes",
                "No",
                "Confirm Attendance (of other members)",
                "Yes"
            ];

            let question_b_uncertainties = "I'm not sure";

            let question_b_not_included = "The justification did not say";
            let processCount = 0;

            let fc = "";
            let fs = "";

            let may_data = [];
            let june_data = [];

            vm.init =  function () {
                firebase.initializeApp({
                    apiKey: "AIzaSyBkGWOoapULGVXikcwkzQxpR_BZ-y-9ndI",
                    authDomain: "researchquestionnaireset2.firebaseapp.com",
                    projectId: "researchquestionnaireset2",
                    storageBucket: "researchquestionnaireset2.appspot.com",
                    messagingSenderId: "75203192387",
                    appId: "1:75203192387:web:ae9913848a32864c9596f6"
                });

                fc =  firebase.firestore().collection('q2dc');
                fs =  firebase.firestore().collection('q2d1');
                fetchData();
            }




            function fetchData() {
                fc.get().then(querySnapshot => {
                    querySnapshot.forEach((doc) => {
                        processEntry(doc.data());
                    });
                    processCompleted();
                });

                fs.get().then(querySnapshot => {
                    querySnapshot.forEach((doc) => {
                        processEntry(doc.data());
                    });
                    processCompleted();
                });

            }



            let gender_distribution = {}


            function processEntry (entry) {
                console.log(entry);

                if (entry === undefined) { return; }
                if (entry.demographics === undefined) { return; }

                if (entry.demographics.gender) {
                    if (gender_distribution.hasOwnProperty(entry.demographics.gender)) {
                        gender_distribution[entry.demographics.gender] = gender_distribution[entry.demographics.gender] + 1;
                    } else {
                        gender_distribution[entry.demographics.gender] = 1;
                    }
                }


            }


            function processCompleted () {
                processCount = processCount + 1;
                if (processCount >= 2) {
                    prepareGraphw();
                }
            }

            function  prepareGraphw () {
                alert("all done");
                console.log(gender_distribution);
               // prepareGraph();



            }

            function prepareGraph() {
                var margin = {top: 20, right: 160, bottom: 35, left: 30};

                var width = 960 - margin.left - margin.right,
                    height = 500 - margin.top - margin.bottom;

                var svg = d3.select("#gender")
                    .append("svg")
                    .attr("width", width + margin.left + margin.right)
                    .attr("height", height + margin.top + margin.bottom)
                    .append("g")
                    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


                var QQ = [
                    { year: "2006", redDelicious: "10", mcintosh: "15", oranges: "9", pears: "6" },
                    { year: "2007", redDelicious: "12", mcintosh: "18", oranges: "9", pears: "4" },
                    { year: "2008", redDelicious: "05", mcintosh: "20", oranges: "8", pears: "2" },
                    { year: "2009", redDelicious: "01", mcintosh: "15", oranges: "5", pears: "4" },
                    { year: "2010", redDelicious: "02", mcintosh: "10", oranges: "4", pears: "2" },
                    { year: "2011", redDelicious: "03", mcintosh: "12", oranges: "6", pears: "3" },
                    { year: "2012", redDelicious: "04", mcintosh: "15", oranges: "8", pears: "1" },
                    { year: "2013", redDelicious: "06", mcintosh: "11", oranges: "9", pears: "4" },
                    { year: "2014", redDelicious: "10", mcintosh: "13", oranges: "9", pears: "5" },
                    { year: "2015", redDelicious: "16", mcintosh: "19", oranges: "6", pears: "9" },
                    { year: "2016", redDelicious: "19", mcintosh: "17", oranges: "5", pears: "7" },
                ];



                // Transpose the data into layers
                var gender_dataset = d3.layout.stack()(Object.keys(gender_distribution).map(function(fruit) {
                    return [gender_distribution].map(function(d) {
                        return {x: "Gender", y: + d[fruit]};
                    });
                }));





                // Set x, y and colors
                var x = d3.scale.ordinal()
                    .domain(gender_dataset[0].map(function(d) { return d.x; }))
                    .rangeRoundBands([10, width-10], 0.02);

                var y = d3.scale.linear()
                    .domain([0, d3.max(gender_dataset, function(d) {  return d3.max(d, function(d) { return d.y0 + d.y; });  })])
                    .range([height, 0]);

                var colors = ["b33040", "#d25c4d", "#f2b447", "#d9d574"];


                // Define and draw axes
                var yAxis = d3.svg.axis()
                    .scale(y)
                    .orient("left")
                    .ticks(5)
                    .tickSize(-width, 0, 0)
                    .tickFormat( function(d) { return d } );

                var xAxis = d3.svg.axis()
                    .scale(x)
                    .orient("bottom");

                svg.append("g")
                    .attr("class", "y axis")
                    .call(yAxis);

                svg.append("g")
                    .attr("class", "x axis")
                    .attr("transform", "translate(0," + height + ")")
                    .call(xAxis);


                // Create groups for each series, rects for each segment
                var groups = svg.selectAll("g.cost")
                    .data(gender_dataset)
                    .enter().append("g")
                    .attr("class", "cost")
                    .style("fill", function(d, i) { return colors[i]; });

                var rect = groups.selectAll("rect")
                    .data(function(d) { return d; })
                    .enter()
                    .append("rect")
                    .attr("x", function(d) { return x(d.x); })
                    .attr("y", function(d) { return y(d.y0 + d.y); })
                    .attr("height", function(d) { return y(d.y0) - y(d.y0 + d.y); })
                    .attr("width", x.rangeBand())
                    .on("mouseover", function() { tooltip.style("display", null); })
                    .on("mouseout", function() { tooltip.style("display", "none"); })
                    .on("mousemove", function(d) {
                        var xPosition = d3.mouse(this)[0] - 15;
                        var yPosition = d3.mouse(this)[1] - 25;
                        tooltip.attr("transform", "translate(" + xPosition + "," + yPosition + ")");
                        tooltip.select("text").text(d.y);
                    });


                // Draw legend
                var legend = svg.selectAll(".legend")
                    .data(colors)
                    .enter().append("g")
                    .attr("class", "legend")
                    .attr("transform", function(d, i) { return "translate(30," + i * 19 + ")"; });

                legend.append("rect")
                    .attr("x", width - 18)
                    .attr("width", 18)
                    .attr("height", 18)
                    .style("fill", function(d, i) {return colors.slice().reverse()[i];});

                legend.append("text")
                    .attr("x", width + 5)
                    .attr("y", 9)
                    .attr("dy", ".35em")
                    .style("text-anchor", "start")
                    .text(function(d, i) {
                        switch (i) {
                            case 0: return "Anjou pears";
                            case 1: return "Naval oranges";
                            case 2: return "McIntosh apples";
                            case 3: return "Red Delicious apples";
                        }
                    });


                // Prep the tooltip bits, initial display is hidden
                var tooltip = svg.append("g")
                    .attr("class", "tooltip")
                    .style("display", "none");

                tooltip.append("rect")
                    .attr("width", 30)
                    .attr("height", 20)
                    .attr("fill", "white")
                    .style("opacity", 0.5);

                tooltip.append("text")
                    .attr("x", 15)
                    .attr("dy", "1.2em")
                    .style("text-anchor", "middle")
                    .attr("font-size", "12px")
                    .attr("font-weight", "bold");




            }




        }
        ]
    )
